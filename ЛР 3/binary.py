def gen_bin_tree(
    height: int,
    root: int,
    left_func=lambda x: x * 3,      # Функция для вычисления левого потомка (по умолчанию: x * 3)
    right_func=lambda x: x - 4      # Функция для вычисления правого потомка (по умолчанию: x - 4)
) -> dict:
    """Создаёт бинарное дерево заданной высоты с указанным корневым значением.

    Дерево представляется в виде вложенного словаря. Каждый узел — это словарь
    с одним ключом (строковое представление значения узла), который указывает
    на другой словарь с дочерними узлами под ключами 'left leaf' и 'right leaf'.
    Листья (узлы на максимальной глубине) сопоставляются с пустыми словарями.

    По соглашению, дерево высоты 0 состоит только из корня без потомков.

    Аргументы:
        height (int): Высота бинарного дерева. Должна быть >= 0.
                      Высота 0 означает, что у корня нет детей.
        root (int): Значение корневого узла.
        left_func (callable, optional): Функция для вычисления левого потомка
                                        по значению родителя. По умолчанию —
                                        ``lambda x: x * 3``.
        right_func (callable, optional): Функция для вычисления правого потомка
                                         по значению родителя. По умолчанию —
                                         ``lambda x: x - 4``.

    Возвращает:
        dict: Вложенный словарь, представляющий бинарное дерево.
    """
    # Если высота отрицательная — возвращаем пустой словарь (некорректный случай)
    if height < 0:
        return {}
    
    # Базовый случай: высота 0 → только корень, без детей
    if height == 0:
        return {str(root): {}}
    
    # Вычисляем значения левого и правого потомков с помощью переданных функций
    left_child = left_func(root)
    right_child = right_func(root)
    
    # Рекурсивно строим левое и правое поддеревья с уменьшенной высотой
    # и передаём те же функции вычисления потомков дальше по рекурсии
    return {
        str(root): {
            "left leaf": gen_bin_tree(height - 1, left_child, left_func, right_func),
            "right leaf": gen_bin_tree(height - 1, right_child, left_func, right_func)
        }
    }
